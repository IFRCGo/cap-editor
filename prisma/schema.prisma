generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator erd {
  // provider                  = "prisma-erd-generator"
  // output                    = "ERD.svg"
  // includeRelationFromFields = true
  // theme                     = "neutral"
  provider              = "prisma-dbml-generator"
  includeRelationFields = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                  String                    @id @default(cuid())
  email               String                    @unique
  name                String?
  emailVerified       DateTime?
  image               String?
  webauthnId          String?
  accounts            Account[]
  Authenticators      Authenticator[]
  CreatedAlerts       Alert[]
  SharedAlerts        SharedAlert[]
  AlertingAuthorities UserAlertingAuthorities[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Alert {
  id                  String            @id
  status              AlertStatus       @default(DRAFT)
  creator             User              @relation(fields: [userId], references: [id])
  language            String            @default("eng")
  data                Json
  userId              String
  alertingAuthorityId String
  AlertingAuthority   AlertingAuthority @relation(fields: [alertingAuthorityId], references: [id])
  SharedAlerts        SharedAlert[]

  @@map("alerts")
}

model AlertingAuthority {
  id                             String                    @id
  author                         String
  countryCode                    String?
  name                           String
  defaultTimezone                String                    @default("Etc/GMT")
  severityCertaintyMatrixEnabled Boolean                   @default(false)
  polygon                        String?
  Users                          UserAlertingAuthorities[]
  Alerts                         Alert[]

  @@map("alerting_authorities")
}

// Case sensitive credential* fields: https://simplewebauthn.dev/docs/packages/server#installing to match the TS definitions
model Authenticator {
  credentialID         String   @id
  credentialPublicKey  Bytes
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String[]
  userId               String
  User                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model SharedAlert {
  id      String   @id @default(cuid())
  userId  String
  alertId String
  expires DateTime @default(dbgenerated("NOW() + interval '24 hours'"))
  User    User     @relation(fields: [userId], references: [id])
  Alert   Alert    @relation(fields: [alertId], references: [id])

  @@map("shared_alerts")
}

model UserAlertingAuthorities {
  userId              String
  alertingAuthorityId String
  verificationToken   String?
  verified            DateTime?
  roles               Role[]

  User              User              @relation(fields: [userId], references: [id])
  AlertingAuthority AlertingAuthority @relation(fields: [alertingAuthorityId], references: [id])

  @@id([userId, alertingAuthorityId])
  @@map("user_alerting_authorities")
}

enum Role {
  ADMIN
  COMPOSER
  APPROVER
}

enum AlertStatus {
  PUBLISHED
  DRAFT
}
