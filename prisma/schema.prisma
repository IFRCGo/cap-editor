generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                                 String            @id @default(cuid())
  name                               String
  email                              String            @unique
  emailVerified                      DateTime?
  image                              String?
  alertingAuthorityId                String
  alertingAuthority                  AlertingAuthority @relation(fields: [alertingAuthorityId], references: [id], onDelete: Cascade)
  alertingAuthorityVerified          DateTime?
  alertingAuthorityVerificationToken String?
  currentWebauthnChallenge           String?
  roles                              Role[]
  accounts                           Account[]
  sessions                           Session[]
  authenticators                     Authenticator[]
  Alert                              Alert[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Alert {
  id      String      @id
  status  AlertStatus @default(DRAFT)
  creator User        @relation(fields: [userId], references: [id])
  data    Json
  userId  String

  @@map("alerts")
}

model AlertingAuthority {
  id          String  @id
  author      String
  countryCode String
  name        String
  polygon     String?
  users       User[]

  @@map("alerting_authorities")
}

// Case sensitive credential* fields: https://simplewebauthn.dev/docs/packages/server#installing to match the TS definitions
model Authenticator {
  credentialID         String   @id
  credentialPublicKey  Bytes
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String[]
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

enum Role {
  ADMIN
  EDITOR
  VALIDATOR
}

enum AlertStatus {
  PUBLISHED
  TEMPLATE
  DRAFT
}
